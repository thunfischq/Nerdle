// Copyright 2022 Henrik Roth

#ifndef NERDLE_H_
#define NERDLE_H_

#include <gtest/gtest.h>
#include <string>
#include <vector>
#include <utility>
#include <unordered_map>
#include "./TerminalManager.h"

// to make the code more readable
#define PLUS -1
#define MINUS -2
#define TIMES -3
#define DIVIDED -4


class Nerdle {
 public:
  // Initialize the game.
  Nerdle();

  // Play the game. Return true if another round will be played.
  bool play(TerminalManager* terminalManager);

 private:
  // Return true if a given string is a syntactically correct equation,
  // f.e. "42-10=32" is correct, "dr+-5=7*ea=42+4" isn't.
  const bool isEquationSyntactic(const std::string* eq) const;
  FRIEND_TEST(NerdleTest, isEquationSyntactic);

  // Split a given equation string at the equal sign into a tuple of the
  // two values left and right of the equal sign,
  // f.e. "42-10=32" -> ("42-10", 32).
  const std::pair<std::string, int> splitEquation(const std::string* eq) const;
  FRIEND_TEST(NerdleTest, splitEquation);

  // Parse given string equation into vector of integers to make it easier to
  // compute the equation. Arithmetic symbol will be converted into integer
  // values that won't show up in any legal equation:
  // + -> -1, - -> -2, * -> -3, / -> -4
  // F.e. "42-10" -> [42, -2, 10].
  const std::vector<int> parseEquation(const std::string* eq) const;
  FRIEND_TEST(NerdleTest, parseEquation);

  // Compute result of given equation.
  // Will return -1 if equation does "illegal" arithmetic operations like a * 0
  // or 5 / 3.
  // F.e. [187, -2, 42, -3, 3, -1, 42, -4, 6, -1, 1] -> 69
  const int computeEquation(const std::vector<int>* eq) const;
  FRIEND_TEST(NerdleTest, computeEquation);

  // Return true if a given equation is correct, meaning the values left and
  // right of the equal sign are equal.
  // Will only work with syntactically correct equations
  // (see isEquationSyntactic).
  // F.e. "42-10=32" is correct, "42+10=13" isn't.
  const bool isEquationCorrect(const std::string* eq) const;
  FRIEND_TEST(NerdleTest, isEquationCorrect);

  // Generate equation that the player must guess to win the game. Generated
  // equation will be syntactically and contentwise correct.
  const std::string generateEquation() const;
  FRIEND_TEST(NerdleTest, generateEquation);

  // Compare the userGuess string with the equation that is to be guessed,
  // and highlite the single symbols for their accordance
  // (via the userGuessHighlight_ member variable).
  const std::string compareUserGuess(const std::string* guess) const;
  FRIEND_TEST(NerdleTest, compareUserGuess);

  // Update current row of the game drawn on the screen based on userGuess_
  // and userGuessHighlight_.
  void drawRow(TerminalManager* tm);

  // Draw the "board" the game is played on at the start of the game.
  void drawBoard(TerminalManager* tm);

  // Draw a slightly modified board after the player won the game.
  void drawWinnerBoard(TerminalManager* tm);

  // Draw a slightly modified board after the player lost the game.
  void drawLoserBoard(TerminalManager* tm);

  // Handle given user input and use drawRow accordingly:
  // Arrow-left or arrow-right -> move the cursor_ left / right
  // Backspace -> delete guessed char at the position of the cursor_ if there
  //              is one and move the cursor_ one to the left. If there is no
  //              guessed char at the position, move the cursor_ left by one
  //              and delete the guessed char at the new position if there
  //              is one
  // Number / arithmetic symbol -> write in userGuess at the position of the
  //                               positiom of the cursor_
  // Enter -> Check wether userGuess_ is correct (syntactically and
  //          content-wise) and if so, use compareUserGuess and drawRow
  //          accordingly and update cursor_, round_, userGuess_
  //          and userGuessHighlight_.
  // q ->  quit the game; return true.
  bool processUserInput(TerminalManager* tm);

  // String containing the guess currently made by user by writing on screen.
  // Parts of the string that the user didn't fill in yet are represented
  // as '?'.
  std::string userGuess_;

  // String containing the color-values with which the singles chars of the
  // userGuess_ are highlighted on screen.
  // This is used for the cursor location and at the end of a round when
  // the user guess is compared to the equation that is to be guessed.
  std::string userGuessHighlight_;

  // String containing the equation the player must guess, generated by
  // generateEquation().
  std::string equation_;

  // Hold the numbers and arithmetic symbols that appear in the equation
  // that the user must guess and, how often they appear for comparing
  // that equation_ to the userGuess_.
  std::unordered_map<char, int> symbolInEquation_;

  // Integer containing the horizontal location of the "cursor" moved by
  // the player.
  int cursor_;

  // Integer containing in which "round" the game currently is.
  int round_;

  // Screen coordinates on which the upper left corner of the board will be
  // drawn for centering purposes.
  int upperLeftRow_;
  int upperLeftCol_;

  // Integer storing a certain value when a message is displayed on the screen
  // like "That guess doesn't compute" which gets decreased by 1 (if it's
  // not already -1) every iteration of the while loop in the play method.
  // When the value is equal to 0, the message is deleted by drawing over
  // the message string.
  int timer_;
};


#endif  // NERDLE_H_

